<?xml version="1.0" encoding="utf-8" ?>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:util="clr-namespace:PanelSW.Installer.JetBA.Util;assembly=PanelSW.Installer.JetBA"
                    xmlns:panelsw="clr-namespace:PanelSW.WPF.Controls;assembly=PanelSwWpfControls"
                    xmlns:xceed="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit"
                    xmlns:cnv="clr-namespace:SampleJetBA.Converters"
                    >

    <!-- Converters -->
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <util:InverseBooleanConverter x:Key="InverseBooleanConverter" />
    <util:EnumToVisibilityConverter x:Key="EnumToVisibilityConverter" />
    <util:EnumBooleanConverter x:Key="EnumBooleanConverter" />
    <cnv:PageTitleConverter x:Key="PageTitleConverter" />
    <cnv:EqualityConverter x:Key="EqualityConverter" />

    <!-- Geometry -->
    <StreamGeometry x:Key="NarrowXSign">M1.4139998,0 C1.4139998,-1.1920929E-07 2.806,1.3919997 4.5459998,3.1319997 L5.6569998,4.2429998 6.7679999,3.1319997 C8.5079997,1.3919997 9.8999999,-1.1920929E-07 9.8999999,0 9.8999999,-1.1920929E-07 11.313999,1.4139998 11.313999,1.4139998 11.313999,1.4139998 9.9220002,2.806 8.1819994,4.5459998 L7.0709994,5.6569998 8.1819994,6.7679999 C9.9220002,8.5079997 11.313999,9.8999999 11.313999,9.8999999 11.313999,9.8999999 9.8999999,11.313999 9.8999999,11.313999 9.8999999,11.313999 8.5079997,9.9220002 6.7679999,8.1819994 L5.6569998,7.0709994 4.5459998,8.1819994 C2.806,9.9220002 1.4139998,11.313999 1.4139998,11.313999 1.4139998,11.313999 -1.1920929E-07,9.8999999 0,9.8999999 -1.1920929E-07,9.8999999 1.3919997,8.5079997 3.1319997,6.7679999 L4.2429998,5.6569998 3.1319997,4.5459998 C1.3919997,2.806 -1.1920929E-07,1.4139998 0,1.4139998 -1.1920929E-07,1.4139998 1.4139998,-1.1920929E-07 1.4139998,0 z</StreamGeometry>
    <StreamGeometry x:Key="CheckMark">F1M9.567,1.494C9.924,1.473 10.29,1.588 10.579,1.844 11.158,2.358 11.211,3.242 10.698,3.821 10.698,3.821 7.178,9.561 7.178,9.561L7.157,9.571 7.121,9.644 6.737,9.775 6.215,10.029C5.857,10.05,5.491,9.936,5.202,9.679L5.109,9.487 4.634,9.066C3.715,8.251 1.877,6.62 1.877,6.62 1.366,6.04 1.422,5.155 2.002,4.644 2.582,4.134 3.467,4.19 3.978,4.77 3.978,4.77 4.795,5.495 5.613,6.219L5.859,6.438 6.844,4.832C7.723,3.398 8.603,1.963 8.603,1.963 8.859,1.674 9.209,1.516 9.567,1.494z</StreamGeometry>

    <SolidColorBrush x:Key="WindowBorderBrush" Color="Gray" />
    <SolidColorBrush x:Key="TitleBarBackgroundBrush" Color="#FF66CBEA" />
    <SolidColorBrush x:Key="TitleBarForegroundBrush" Color="White" />

    <LinearGradientBrush x:Key="LogoBarBackgroundBrush" EndPoint="0.504,1.5" StartPoint="0.504,0.03">
        <GradientStop Color="#FFC934" Offset="0"/>
        <GradientStop Color="White" Offset="0.567"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="LogoBarForegroundBrush" Color="#49678C" />

    <SolidColorBrush x:Key="SideBarBackgroundBrush" Color="#F0F0F0" />
    <SolidColorBrush x:Key="SideBarForegroundBrush" Color="Black" />

    <SolidColorBrush x:Key="PopupBorderBrush" Color="#5DAEFB" />
    <SolidColorBrush x:Key="PopupBackgroundBrush" Color="#F0F0F0" />
    <SolidColorBrush x:Key="PopupForegroundBrush" Color="Black" />

    <SolidColorBrush x:Key="BackgroundBrush" Color="White" />
    <SolidColorBrush x:Key="WindowFrameBackgrdBrush" Color="#A8A8A8" />
    <SolidColorBrush x:Key="ForegroundBrush" Color="Black" />
    
    <SolidColorBrush x:Key="TextBoxBorderBrush" Color="#ABADB3" />
    <SolidColorBrush x:Key="TextBoxFocusedBorderBrush" Color="#569DE5" />

    <SolidColorBrush x:Key="ButtonBackgroundBrush" Color="#F7F6F6" />
    <SolidColorBrush x:Key="ButtonBackgroundHoverBrush" Color="LightBlue" />
    <SolidColorBrush x:Key="ButtonForegroundBrush" Color="Black" />

    <SolidColorBrush x:Key="DefaultButtonBackgroundBrush" Color="#3059AA" />
    <SolidColorBrush x:Key="DefaultButtonBackgroundHoverBrush" Color="#2A6DA5" />
    <SolidColorBrush x:Key="DefaultButtonForegroundBrush" Color="White" />

    <SolidColorBrush x:Key="ProgressBarBackgroundBrush" Color="#FFB4CDED" />
    <SolidColorBrush x:Key="ProgressBarForegroundBrush" Color="#FF1E7DF7" />

    <SolidColorBrush x:Key="ValidationProgressBarBackgroundBrush" Color="LightGray" />
    <SolidColorBrush x:Key="ValidationProgressBarForegroundBrush" Color="Black" />

    <!-- Control Templates -->

    <ControlTemplate x:Key="CheckboxTemplate" TargetType="{x:Type CheckBox}">
        <Grid Height="20" MinWidth="50">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CheckStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0:0:0.1"/>
                    </VisualStateGroup.Transitions>
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="CheckMark">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unchecked"/>
                    <VisualState x:Name="Indeterminate"/>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal"/>
                    <VisualState x:Name="MouseOver"/>
                    <VisualState x:Name="Pressed"/>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Background">
                                <EasingColorKeyFrame KeyTime="0" Value="#FFCDDEE5"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>

            <Grid Grid.Column="0" Width="17" Height="17" VerticalAlignment="Center">
                <Rectangle x:Name="Background" RadiusX="1" RadiusY="1" Fill="White" Stroke="{StaticResource WindowFrameBackgrdBrush}" StrokeThickness="1"/>
                <Path x:Name="CheckMark" Data="{StaticResource CheckMark}" HorizontalAlignment="Center" VerticalAlignment="Center" FlowDirection="LeftToRight" Width="13" Height="12" Fill="#95bd45" Opacity="0"/>
            </Grid>
            <ContentPresenter Grid.Column="1" TextElement.Foreground="{TemplateBinding Foreground}" TextElement.FontSize="11" Content="{TemplateBinding Content}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="6,0,0,0"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Gray" />
            </Trigger>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded"/>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Styles -->
    <Style TargetType="Button">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="8,0,8,0"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="btn" CornerRadius="4" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Opacity="{TemplateBinding Opacity}">
                        <TextBlock Name="txt" Text="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" Background="{TemplateBinding Background}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="ValueStates">
                                <VisualState Name="Ready"/>
                                <VisualState Name="Waiting">
                                    <Storyboard>
                                        <ColorAnimation To="Transparent" Duration="0:0:0.5" Storyboard.TargetName="txt" Storyboard.TargetProperty="(Foreground).(Color)" RepeatBehavior="Forever"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefault" Value="True">
                            <Setter Property="Background" Value="{StaticResource DefaultButtonBackgroundBrush}" />
                            <Setter Property="Foreground" Value="{StaticResource DefaultButtonForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6" />
            </Trigger>
            <!-- Mouse hover & non-default -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDefault" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource ButtonBackgroundHoverBrush}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>

            <!-- Mouse hover & default -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDefault" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderThickness" Value="2" />
                    <Setter Property="Background" Value="{StaticResource DefaultButtonBackgroundHoverBrush}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="CheckBox">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template" Value="{StaticResource CheckboxTemplate}"/>
    </Style>

    <Style TargetType="Image">
        <Setter Property="Height" Value="60"/>
        <Setter Property="Width" Value="60"/>
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="RenderTransformOrigin" Value=".5,.5" />
    </Style>

    <Style TargetType="panelsw:WaitableButton" BasedOn="{StaticResource {x:Type Button}}"/>

    <!-- Text input fields -->
    <Style x:Key="TextInputBaseStyle">
        <Setter Property="Control.FlowDirection" Value="LeftToRight"/>
        <Setter Property="Control.Padding" Value="10,0,0,0"/>
        <Setter Property="Control.Height" Value="32"/>
        <Setter Property="Control.FontSize" Value="14"/>
        <Setter Property="Control.Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="Control.VerticalAlignment" Value="Center" />
        <Setter Property="Control.HorizontalAlignment" Value="Stretch" />
        <Setter Property="Control.HorizontalContentAlignment" Value="Left" />
        <Setter Property="Control.VerticalContentAlignment" Value="Center" />
        <Setter Property="Control.Background" Value="White" />
        <Setter Property="Control.BorderThickness" Value="1" />
        <Setter Property="Control.BorderBrush" Value="{StaticResource TextBoxBorderBrush}" />
        <Style.Triggers>
            <Trigger Property="Control.IsKeyboardFocusWithin" Value="True">
                <Setter Property="Control.BorderBrush" Value="{StaticResource TextBoxFocusedBorderBrush}" />
            </Trigger>
            <Trigger Property="Control.IsFocused" Value="True">
                <Setter Property="Control.BorderBrush" Value="{StaticResource TextBoxFocusedBorderBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="ComboBox" BasedOn="{StaticResource TextInputBaseStyle}"/>
    <Style TargetType="xceed:WatermarkTextBox" BasedOn="{StaticResource TextInputBaseStyle}"/>
    <Style TargetType="TextBox" BasedOn="{StaticResource TextInputBaseStyle}"/>

    <!-- EyePasswordBox -->
    <Style TargetType="TextBox" x:Key="{x:Static panelsw:ResourceKeys.EyePasswordBoxTextBoxStyleKey}" BasedOn="{StaticResource TextInputBaseStyle}"/>
    <Style TargetType="xceed:WatermarkPasswordBox" x:Key="{x:Static panelsw:ResourceKeys.EyePasswordBoxWatermarkPasswordBoxStyleKey}" BasedOn="{StaticResource TextInputBaseStyle}">
        <Setter Property="Control.BorderThickness" Value="0" />
    </Style>
    <Style TargetType="panelsw:EyePasswordBox" BasedOn="{StaticResource {x:Type panelsw:EyePasswordBox}}">
        <Setter Property="Height" Value="36"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Background" Value="White" />
    </Style>
    <Style TargetType="Border" x:Key="{x:Static panelsw:ResourceKeys.EyePasswordBoxBorderStyleKey}" BasedOn="{StaticResource {x:Static panelsw:ResourceKeys.EyePasswordBoxBorderStyleKey}}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxBorderBrush}" />
        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxFocusedBorderBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="{x:Static panelsw:ResourceKeys.EyePasswordBoxButtonStyleKey}" BasedOn="{StaticResource {x:Static panelsw:ResourceKeys.EyePasswordBoxButtonStyleKey}}">
        <Setter Property="Height" Value="24" />
        <Setter Property="Width" Value="24" />
    </Style>

    <Style TargetType="TextBlock" x:Key="GenericText">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <Style TargetType="TextBlock" x:Key="HeaderText">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TitleText">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontStyle" Value="Oblique"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <Style TargetType="Label">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <Style TargetType="ProgressBar" x:Key="ValidationProgressBar">
        <Setter Property="Foreground" Value="{StaticResource ValidationProgressBarForegroundBrush}" />
        <Setter Property="Background" Value="{StaticResource ValidationProgressBarBackgroundBrush}" />
        <Setter Property="Height" Value="1"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="5,5,5,10"/>
    </Style>

    <Style TargetType="ProgressBar">
        <Setter Property="Foreground" Value="{StaticResource ProgressBarForegroundBrush}" />
        <Setter Property="Background" Value="{StaticResource ProgressBarBackgroundBrush}" />
        <Setter Property="Width" Value="400" />
        <Setter Property="Height" Value="10"/>
    </Style>

    <Style TargetType="RadioButton">
        <Setter Property="Margin" Value="5,2,5,2"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
    </Style>

    <!-- Window buttons -->
    <ControlTemplate x:Key="CloseButtonTemplate" TargetType="{x:Type Button}">
        <Grid>
            <Grid Background="Transparent">
                <Path Data="{StaticResource NarrowXSign}" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform"/>
                <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}"/>
            </Grid>
        </Grid>
    </ControlTemplate>

    <Style x:Key="CloseButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="14"/>
        <Setter Property="Width" Value="14"/>
        <Setter Property="Template" Value="{StaticResource CloseButtonTemplate}"/>
    </Style>

    <ControlTemplate x:Key="MinimizeButtonTemplate" TargetType="{x:Type Button}">
        <Grid>
            <Grid Background="Transparent">
                <Rectangle Height="2" Fill="{TemplateBinding Foreground}" VerticalAlignment="Bottom"/>
                <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}"/>
            </Grid>
        </Grid>
    </ControlTemplate>

    <Style x:Key="MinimizeButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="14"/>
        <Setter Property="Width" Value="14"/>
        <Setter Property="Template" Value="{StaticResource MinimizeButtonTemplate}"/>
    </Style>

    <Style x:Key="InputGridStyle">
        <Setter Property="Control.VerticalAlignment" Value="Top"/>
        <Setter Property="Control.HorizontalAlignment" Value="Left"/>
        <Setter Property="Control.Margin" Value="10,20,10,10"/>
    </Style>
</ResourceDictionary>